{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/NewEntryForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { postNewEntry, postNewTag } from \"../services/serverConnection\";\nimport OptionalDatePicker from \"./OptionalDatePicker\";\nimport TagInput from \"./TagInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//Default settings for default date, used for component creation and refresh after submit\nlet defaultDateObject = {\n  month: 1,\n  date: 1,\n  year: 2000\n};\nconst NewEntryForm = props => {\n  _s();\n  /** HELPER FUNCTIONS */\n\n  //Helper function to clear the form when need be\n  const clearForm = () => {\n    setInputValue('');\n    setDateObject({\n      ...defaultDateObject\n    });\n  };\n\n  /** HOOKS */\n\n  //Setting up access to queryClient instance from root\n  const queryClient = useQueryClient();\n  const {\n    data,\n    error,\n    isLoading\n  } = useQuery('entries', getAllEntries);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 21\n  }, this);\n\n  //States for the text input and the date picker input\n  const [inputValue, setInputValue] = useState('');\n  const [dateObject, setDateObject] = useState({\n    ...defaultDateObject\n  });\n\n  //Mutation hook used for creating new entries upon form submit, triggering a reload of everything on the page\n  const entriesMutation = useMutation(postNewEntry, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds (for the key of entries)\n      queryClient.invalidateQueries('entries');\n    }\n  });\n  const tagsMutation = useMutation(postNewTag, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds (for the key of tags)\n      queryClient.invalidateQueries('tags');\n    }\n  });\n\n  /** HANDLERS */\n\n  //Change handler for the text input\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  //Submit handler for the form\n  const handleSubmit = e => {\n    e.preventDefault();\n    let inputConvertedToNewEntry = {\n      message: inputValue,\n      dateObject: dateObject\n    };\n    // Call mutate to trigger the mutation function defined above\n    entriesMutation.mutate(inputConvertedToNewEntry);\n\n    //TODO: tags should only be mutated if new tags were created\n    clearForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create New Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"updateInput\",\n        children: \"Memory Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"updateInput\",\n        value: inputValue,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OptionalDatePicker, {\n        inclusiveMinYearBound: 2000,\n        inclusiveMaxYearBound: 2024,\n        dateObject: dateObject,\n        setDateObject: setDateObject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TagInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: entriesMutation.isLoading || tagsMutation.isLoading,\n        children: entriesMutation.isLoading || tagsMutation.isLoading ? 'Updating...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(NewEntryForm, \"eCVZKRbdP9ejiDkM0TlK966xLm8=\", false, function () {\n  return [useQueryClient, useQuery, useMutation, useMutation];\n});\n_c = NewEntryForm;\nexport default NewEntryForm;\nvar _c;\n$RefreshReg$(_c, \"NewEntryForm\");","map":{"version":3,"names":["React","useState","useMutation","useQuery","useQueryClient","postNewEntry","postNewTag","OptionalDatePicker","TagInput","jsxDEV","_jsxDEV","defaultDateObject","month","date","year","NewEntryForm","props","_s","clearForm","setInputValue","setDateObject","queryClient","data","error","isLoading","getAllEntries","children","fileName","_jsxFileName","lineNumber","columnNumber","toString","inputValue","dateObject","entriesMutation","onSuccess","invalidateQueries","tagsMutation","handleInputChange","e","target","value","handleSubmit","preventDefault","inputConvertedToNewEntry","message","mutate","onSubmit","htmlFor","type","id","onChange","required","inclusiveMinYearBound","inclusiveMaxYearBound","disabled","_c","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/NewEntryForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { QueryClient, useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { postNewEntry, postNewTag } from \"../services/serverConnection\";\nimport { DataEntry, DateObject, NewDataEntry, NewTageObject } from \"../../../types\";\nimport axios from \"axios\";\nimport RequiredDatePicker from \"./RequiredDatePicker\";\nimport OptionalDatePicker from \"./OptionalDatePicker\";\nimport TagInput from \"./TagInput\";\n\ntype newEntryFormProps = {};\n\n//Default settings for default date, used for component creation and refresh after submit\nlet defaultDateObject = {\n  month: 1,\n  date: 1,\n  year: 2000\n}\n\nconst NewEntryForm: React.FC<newEntryFormProps> = (props:newEntryFormProps) => {\n\n  /** HELPER FUNCTIONS */\n\n   //Helper function to clear the form when need be\n   const clearForm = () => {\n    setInputValue(''); \n    setDateObject({...defaultDateObject});\n  }\n\n  /** HOOKS */\n\n  //Setting up access to queryClient instance from root\n  const queryClient = useQueryClient();\n\n  const { data, error, isLoading } = useQuery('entries', getAllEntries);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.toString()}</div>; \n  if (!data) return <div>No data found</div>\n\n\n  //States for the text input and the date picker input\n  const [inputValue, setInputValue] = useState<string>('');\n  const [dateObject, setDateObject] = useState<DateObject>({...defaultDateObject});\n\n  //Mutation hook used for creating new entries upon form submit, triggering a reload of everything on the page\n  const entriesMutation = useMutation<void, unknown, NewDataEntry>(\n    postNewEntry,\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds (for the key of entries)\n        queryClient.invalidateQueries('entries');\n      },\n    }\n  );\n\n  const tagsMutation = useMutation<void, unknown, NewTageObject>(\n    postNewTag,\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds (for the key of tags)\n        queryClient.invalidateQueries('tags');\n      },\n    }\n  )\n\n  /** HANDLERS */\n\n  //Change handler for the text input\n  const handleInputChange = (e:any) => {\n    setInputValue(e.target.value);\n  };\n\n  //Submit handler for the form\n  const handleSubmit = (e:any) => {\n    e.preventDefault();\n\n    let inputConvertedToNewEntry : NewDataEntry = { message: inputValue, dateObject: dateObject }\n    // Call mutate to trigger the mutation function defined above\n    entriesMutation.mutate(inputConvertedToNewEntry);\n\n    //TODO: tags should only be mutated if new tags were created\n    clearForm();\n  };\n\n  return (\n    <div>\n      <h1>Create New Memory</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"updateInput\">Memory Text:</label>\n        <input\n          type=\"text\"\n          id=\"updateInput\"\n          value={inputValue}\n          onChange={handleInputChange}\n          required\n        />\n        <OptionalDatePicker \n          inclusiveMinYearBound={2000} \n          inclusiveMaxYearBound={2024} \n          dateObject={dateObject} \n          setDateObject={setDateObject}\n        />\n        <TagInput/>\n        <button type=\"submit\" disabled={entriesMutation.isLoading || tagsMutation.isLoading}>\n          {entriesMutation.isLoading || tagsMutation.isLoading ? 'Updating...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default NewEntryForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}