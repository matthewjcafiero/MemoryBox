{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/newEntryForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nconst NewEntryForm = props => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const queryClient = useQueryClient();\n  const mutation = useMutation(async payload => {\n    console.log(payload);\n    const response = await api.post(`/newEntry`, payload); // Adjust API endpoint as per your backend\n    return;\n  }, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds\n      // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n      queryClient.invalidateQueries('entries'); // Replace 'yourQueryKey' with your actual query key\n    }\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Call mutate to trigger the mutation function defined above\n    mutation.mutate({\n      message: inputValue\n    });\n    setInputValue(''); // Clear input after submission\n  };\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"updateInput\",\n        children: \"Update Value:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"updateInput\",\n        value: inputValue,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: mutation.isLoading,\n        children: mutation.isLoading ? 'Updating...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(NewEntryForm, \"3wqwYcuTvvPYdl+vEsOJhlGJIE0=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = NewEntryForm;\nexport default NewEntryForm;\nvar _c;\n$RefreshReg$(_c, \"NewEntryForm\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","axios","jsxDEV","_jsxDEV","API_BASE_URL","api","create","baseURL","NewEntryForm","props","_s","inputValue","setInputValue","queryClient","mutation","payload","console","log","response","post","onSuccess","invalidateQueries","handleSubmit","e","preventDefault","mutate","message","handleInputChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","disabled","isLoading","_c","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/newEntryForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { QueryClient, useMutation, useQueryClient } from \"react-query\";\nimport { postNewEntry } from \"../services/serverConnection\";\nimport { DataEntry, NewDataEntry } from \"../../../types\";\nimport axios from \"axios\";\n\ntype newEntryFormProps = {};\n\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\nconst NewEntryForm: React.FC<newEntryFormProps> = (props:newEntryFormProps) => {\n\n  const [inputValue, setInputValue] = useState<String>('');\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation(\n    async (payload: NewDataEntry) => {\n      console.log(payload);\n      const response = await api.post(`/newEntry`, payload); // Adjust API endpoint as per your backend\n      return;\n    },\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds\n        // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n        queryClient.invalidateQueries('entries'); // Replace 'yourQueryKey' with your actual query key\n      },\n    }\n  );\n\n  const handleSubmit = (e:any) => {\n    e.preventDefault();\n    // Call mutate to trigger the mutation function defined above\n    mutation.mutate({ message: inputValue });\n    setInputValue(''); // Clear input after submission\n  };\n\n  const handleInputChange = (e:any) => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Update Form</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"updateInput\">Update Value:</label>\n        <input\n          type=\"text\"\n          id=\"updateInput\"\n          value={inputValue}\n          onChange={handleInputChange}\n          required\n        />\n        <button type=\"submit\" disabled={mutation.isLoading}>\n          {mutation.isLoading ? 'Updating...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default NewEntryForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAAsBC,WAAW,EAAEC,cAAc,QAAQ,aAAa;AAGtE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1B,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;AAEF,MAAMI,YAAyC,GAAIC,KAAuB,IAAK;EAAAC,EAAA;EAE7E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAMe,WAAW,GAAGb,cAAc,CAAC,CAAC;EAEpC,MAAMc,QAAQ,GAAGf,WAAW,CAC1B,MAAOgB,OAAqB,IAAK;IAC/BC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACpB,MAAMG,QAAQ,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAE,WAAU,EAAEJ,OAAO,CAAC,CAAC,CAAC;IACvD;EACF,CAAC,EACD;IACEK,SAAS,EAAEA,CAAA,KAAM;MACf;MACA;MACAP,WAAW,CAACQ,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5C;EACF,CACF,CAAC;EAED,MAAMC,YAAY,GAAIC,CAAK,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACAV,QAAQ,CAACW,MAAM,CAAC;MAAEC,OAAO,EAAEf;IAAW,CAAC,CAAC;IACxCC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,MAAMe,iBAAiB,GAAIJ,CAAK,IAAK;IACnCX,aAAa,CAACW,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,oBACE1B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAA2B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB/B,OAAA;MAAMgC,QAAQ,EAAEb,YAAa;MAAAQ,QAAA,gBAC3B3B,OAAA;QAAOiC,OAAO,EAAC,aAAa;QAAAN,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClD/B,OAAA;QACEkC,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,aAAa;QAChBT,KAAK,EAAElB,UAAW;QAClB4B,QAAQ,EAAEZ,iBAAkB;QAC5Ba,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF/B,OAAA;QAAQkC,IAAI,EAAC,QAAQ;QAACI,QAAQ,EAAE3B,QAAQ,CAAC4B,SAAU;QAAAZ,QAAA,EAChDhB,QAAQ,CAAC4B,SAAS,GAAG,aAAa,GAAG;MAAQ;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAAxB,EAAA,CAjDKF,YAAyC;EAAA,QAGzBR,cAAc,EAEjBD,WAAW;AAAA;AAAA4C,EAAA,GALxBnC,YAAyC;AAmD/C,eAAeA,YAAY;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}