{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/EntriesPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport EntriesList from \"./EntriesList\";\nimport NewEntryForm from \"./newEntryForm\";\nimport { useMutation } from \"react-query\";\nimport axios from \"axios\";\n// import NewEntryForm from \"./newEntryForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nconst EntriesPage = () => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const mutation = useMutation(async payload => {\n    const response = await api.post(`/newEntry`, payload); // Adjust API endpoint as per your backend\n    return response.data;\n  }, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds\n      // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n      invalidateQueries('entries'); // Replace 'yourQueryKey' with your actual query key\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewEntryForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EntriesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(EntriesPage, \"brcwcg4FiJJs2KCg+e5qoUwQNrs=\", false, function () {\n  return [useMutation];\n});\n_c = EntriesPage;\nexport default EntriesPage;\nfunction invalidateQueries(arg0) {\n  throw new Error(\"Function not implemented.\");\n}\nvar _c;\n$RefreshReg$(_c, \"EntriesPage\");","map":{"version":3,"names":["React","useState","EntriesList","NewEntryForm","useMutation","axios","jsxDEV","_jsxDEV","API_BASE_URL","api","create","baseURL","EntriesPage","_s","inputValue","setInputValue","mutation","payload","response","post","data","onSuccess","invalidateQueries","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","arg0","Error","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/EntriesPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport EntriesList from \"./EntriesList\";\nimport NewEntryForm from \"./newEntryForm\";\nimport { useMutation } from \"react-query\";\nimport axios from \"axios\";\n// import NewEntryForm from \"./newEntryForm\";\n\ntype EntriesPageProps = {};\n\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\nconst EntriesPage: React.FC<EntriesPageProps> = () => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const mutation = useMutation(\n    async (payload) => {\n      const response = await api.post(`/newEntry`, payload); // Adjust API endpoint as per your backend\n      return response.data;\n    },\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds\n        // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n        invalidateQueries('entries'); // Replace 'yourQueryKey' with your actual query key\n      },\n    }\n  );\n\n  return (\n    <div>\n      <NewEntryForm></NewEntryForm>\n      <EntriesList></EntriesList>\n    </div>\n  );\n}\n\nexport default EntriesPage;\n\nfunction invalidateQueries(arg0: string) {\n  throw new Error(\"Function not implemented.\");\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;AAEF,MAAMI,WAAuC,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMe,QAAQ,GAAGZ,WAAW,CAC1B,MAAOa,OAAO,IAAK;IACjB,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAE,WAAU,EAAEF,OAAO,CAAC,CAAC,CAAC;IACvD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,EACD;IACEC,SAAS,EAAEA,CAAA,KAAM;MACf;MACA;MACAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChC;EACF,CACF,CAAC;EAED,oBACEf,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACJ,YAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,eAC7BpB,OAAA,CAACL,WAAW;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAAAd,EAAA,CAxBKD,WAAuC;EAAA,QAI1BR,WAAW;AAAA;AAAAwB,EAAA,GAJxBhB,WAAuC;AA0B7C,eAAeA,WAAW;AAE1B,SAASU,iBAAiBA,CAACO,IAAY,EAAE;EACvC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;AAC9C;AAAC,IAAAF,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}