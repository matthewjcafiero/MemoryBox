{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/deprecated/Entries.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getAllEntries } from '../services/serverConnection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Entries = () => {\n  _s();\n  const [entries, setEntries] = useState([]);\n\n  //After the render of the app, fetch the entries stores on the servers\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const entries = await getAllEntries();\n        setEntries(entries);\n      } catch (error) {\n        console.error('Error fetching entries:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures effect runs only once after initial render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Entries, \"si2ZVsazrWomTuBdDT2zYRo3CE0=\");\n_c = Entries;\nexport default Entries;\nvar _c;\n$RefreshReg$(_c, \"Entries\");","map":{"version":3,"names":["React","useEffect","useState","getAllEntries","jsxDEV","_jsxDEV","Entries","_s","entries","setEntries","fetchData","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/deprecated/Entries.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport NewEntryForm from './NewEntryForm';\nimport { DataEntry, NewDataEntry } from '../../../types';\nimport Entry from './Entry';\nimport { getAllEntries } from '../services/serverConnection';\n\ntype EntriesProps = {}\n\nconst Entries: React.FC<EntriesProps> = () => {\n  const [entries, setEntries] = useState<NewDataEntry[]>([]);\n\n    //After the render of the app, fetch the entries stores on the servers\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const entries = await getAllEntries();\n          setEntries(entries);\n        } catch (error) {\n          console.error('Error fetching entries:', error);\n        }\n      };\n  \n      fetchData();\n    }, []); // Empty dependency array ensures effect runs only once after initial render\n\n  return (\n    <div>\n      <p></p>\n      {/* <NewEntryForm setEntries={setEntries}/>\n      <div>\n        {\n          entries.map((entry, index) => (\n            <Entry key={index} DataEntry={entry} />\n          ))\n        }\n      </div> */}\n    </div>\n  );\n};\n\nexport default Entries;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAIlD,SAASC,aAAa,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI7D,MAAMC,OAA+B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAiB,EAAE,CAAC;;EAExD;EACAD,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMF,OAAO,GAAG,MAAML,aAAa,CAAC,CAAC;QACrCM,UAAU,CAACD,OAAO,CAAC;MACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAEV,oBACEL,OAAA;IAAAQ,QAAA,eACER,OAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OASJ,CAAC;AAEV,CAAC;AAACV,EAAA,CA9BID,OAA+B;AAAAY,EAAA,GAA/BZ,OAA+B;AAgCrC,eAAeA,OAAO;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}