{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/newEntryForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nconst NewEntryForm = props => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const mutation = useMutation(async payload => {\n    const response = await api.post(`/newEntry`, payload); // Adjust API endpoint as per your backend\n    return;\n  }, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds\n      // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n      invalidateQueries('entries'); // Replace 'yourQueryKey' with your actual query key\n    }\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Call mutate to trigger the mutation function defined above\n    mutation.mutate({\n      data: inputValue\n    });\n    setInputValue(''); // Clear input after submission\n  };\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(NewEntryForm, \"brcwcg4FiJJs2KCg+e5qoUwQNrs=\", false, function () {\n  return [useMutation];\n});\n_c = NewEntryForm;\nexport default NewEntryForm;\nfunction invalidateQueries(arg0) {\n  throw new Error(\"Function not implemented.\");\n}\nvar _c;\n$RefreshReg$(_c, \"NewEntryForm\");","map":{"version":3,"names":["React","useState","useMutation","axios","jsxDEV","_jsxDEV","API_BASE_URL","api","create","baseURL","NewEntryForm","props","_s","inputValue","setInputValue","mutation","payload","response","post","onSuccess","invalidateQueries","handleSubmit","e","preventDefault","mutate","data","handleInputChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","arg0","Error","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/newEntryForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { QueryClient, useMutation, useQueryClient } from \"react-query\";\nimport { postNewEntry } from \"../services/serverConnection\";\nimport { DataEntry } from \"../../../types\";\nimport axios from \"axios\";\n\ntype newEntryFormProps = {};\n\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\nconst NewEntryForm: React.FC<newEntryFormProps> = (props:newEntryFormProps) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const mutation = useMutation(\n    async (payload) => {\n      const response = await api.post(`/newEntry`, payload); // Adjust API endpoint as per your backend\n      return;\n    },\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds\n        // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n        invalidateQueries('entries'); // Replace 'yourQueryKey' with your actual query key\n      },\n    }\n  );\n\n  const handleSubmit = (e:any) => {\n    e.preventDefault();\n    // Call mutate to trigger the mutation function defined above\n    mutation.mutate({ data: inputValue });\n    setInputValue(''); // Clear input after submission\n  };\n\n  const handleInputChange = (e:any) => {\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nexport default NewEntryForm;\n\nfunction invalidateQueries(arg0: string) {\n  throw new Error(\"Function not implemented.\");\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAAsBC,WAAW,QAAwB,aAAa;AAGtE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1B,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;AAEF,MAAMI,YAAyC,GAAIC,KAAuB,IAAK;EAAAC,EAAA;EAE7E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMc,QAAQ,GAAGb,WAAW,CAC1B,MAAOc,OAAO,IAAK;IACjB,MAAMC,QAAQ,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAE,WAAU,EAAEF,OAAO,CAAC,CAAC,CAAC;IACvD;EACF,CAAC,EACD;IACEG,SAAS,EAAEA,CAAA,KAAM;MACf;MACA;MACAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChC;EACF,CACF,CAAC;EAED,MAAMC,YAAY,GAAIC,CAAK,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;IACAR,QAAQ,CAACS,MAAM,CAAC;MAAEC,IAAI,EAAEZ;IAAW,CAAC,CAAC;IACrCC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,MAAMY,iBAAiB,GAAIJ,CAAK,IAAK;IACnCR,aAAa,CAACQ,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,oBACEvB,OAAA;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV,CAAC;AAAApB,EAAA,CAlCKF,YAAyC;EAAA,QAI5BR,WAAW;AAAA;AAAA+B,EAAA,GAJxBvB,YAAyC;AAoC/C,eAAeA,YAAY;AAE3B,SAASU,iBAAiBA,CAACc,IAAY,EAAE;EACvC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;AAC9C;AAAC,IAAAF,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}