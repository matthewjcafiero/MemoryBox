{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/newEntryForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { postNewEntry } from \"../services/serverConnection\";\nimport OptionalDatePicker from \"./OptionalDatePicker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet defaultDateObject = {\n  month: 1,\n  date: 1,\n  year: 2000\n};\nconst NewEntryForm = props => {\n  _s();\n  //Setting up access to queryClient instance from root\n  const queryClient = useQueryClient();\n\n  //States for the text input and the date picker input\n  const [inputValue, setInputValue] = useState('');\n  const [dateObject, setDateObject] = useState({\n    ...defaultDateObject\n  });\n\n  //Helper function to clear the form when need be\n  const clearForm = () => {\n    setInputValue('');\n    setDateObject({\n      ...defaultDateObject\n    });\n  };\n\n  //Mutation hook used for creating new entries, triggering a reload of everything on the page\n  const mutation = useMutation(postNewEntry, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds (for the key of entries)\n      queryClient.invalidateQueries('entries');\n    }\n  });\n\n  //S\n  const handleSubmit = e => {\n    e.preventDefault();\n    let inputConvertedToNewEntry = {\n      message: inputValue,\n      dateObject: dateObject\n    };\n    // Call mutate to trigger the mutation function defined above\n    mutation.mutate(inputConvertedToNewEntry);\n    clearForm();\n  };\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Update Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"updateInput\",\n        children: \"Update Value:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"updateInput\",\n        value: inputValue,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OptionalDatePicker, {\n        inclusiveMinYearBound: 2000,\n        inclusiveMaxYearBound: 2024,\n        dateObject: dateObject,\n        setDateObject: setDateObject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: mutation.isLoading,\n        children: mutation.isLoading ? 'Updating...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(NewEntryForm, \"/1JJ2SU8lt+dm3hBK6FNQY9Oiq8=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = NewEntryForm;\nexport default NewEntryForm;\nvar _c;\n$RefreshReg$(_c, \"NewEntryForm\");","map":{"version":3,"names":["React","useState","useMutation","useQueryClient","postNewEntry","OptionalDatePicker","jsxDEV","_jsxDEV","defaultDateObject","month","date","year","NewEntryForm","props","_s","queryClient","inputValue","setInputValue","dateObject","setDateObject","clearForm","mutation","onSuccess","invalidateQueries","handleSubmit","e","preventDefault","inputConvertedToNewEntry","message","mutate","handleInputChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","inclusiveMinYearBound","inclusiveMaxYearBound","disabled","isLoading","_c","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/newEntryForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { QueryClient, useMutation, useQueryClient } from \"react-query\";\nimport { postNewEntry } from \"../services/serverConnection\";\nimport { DataEntry, DateObject, NewDataEntry } from \"../../../types\";\nimport axios from \"axios\";\nimport OptionalDatePicker from \"./OptionalDatePicker\";\n\ntype newEntryFormProps = {};\n\nlet defaultDateObject = {\n  month: 1,\n  date: 1,\n  year: 2000\n}\n\nconst NewEntryForm: React.FC<newEntryFormProps> = (props:newEntryFormProps) => {\n\n  //Setting up access to queryClient instance from root\n  const queryClient = useQueryClient();\n\n  //States for the text input and the date picker input\n  const [inputValue, setInputValue] = useState<string>('');\n  const [dateObject, setDateObject] = useState<DateObject>({...defaultDateObject});\n\n  //Helper function to clear the form when need be\n  const clearForm = () => {\n    setInputValue(''); \n    setDateObject({...defaultDateObject});\n  }\n\n  //Mutation hook used for creating new entries, triggering a reload of everything on the page\n  const mutation = useMutation<void, unknown, NewDataEntry>(\n    postNewEntry,\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds (for the key of entries)\n        queryClient.invalidateQueries('entries');\n      },\n    }\n  );\n\n  //S\n  const handleSubmit = (e:any) => {\n    e.preventDefault();\n\n    let inputConvertedToNewEntry : NewDataEntry = { message: inputValue, dateObject: dateObject }\n    // Call mutate to trigger the mutation function defined above\n    mutation.mutate(inputConvertedToNewEntry);\n    clearForm();\n  };\n\n  const handleInputChange = (e:any) => {\n    setInputValue(e.target.value);\n  };\n\n\n\n  return (\n    <div>\n      <h1>Update Form</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"updateInput\">Update Value:</label>\n        <input\n          type=\"text\"\n          id=\"updateInput\"\n          value={inputValue}\n          onChange={handleInputChange}\n          required\n        />\n        <OptionalDatePicker \n          inclusiveMinYearBound={2000} \n          inclusiveMaxYearBound={2024} \n          dateObject={dateObject} \n          setDateObject={setDateObject}\n        />\n        <button type=\"submit\" disabled={mutation.isLoading}>\n          {mutation.isLoading ? 'Updating...' : 'Submit'}\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default NewEntryForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}