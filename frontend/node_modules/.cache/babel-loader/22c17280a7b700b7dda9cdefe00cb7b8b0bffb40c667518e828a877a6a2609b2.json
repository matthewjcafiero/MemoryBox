{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/TagInput.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport CreatableSelect from \"react-select/creatable\";\nimport { useQuery } from \"react-query\";\nimport { getAllTags } from \"../services/serverConnection\";\n\n//TODO: use the actual props for the option component here?\n//These are the types of the option component which the multi select uses\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TagInput = ({\n  selectedTags,\n  setSelectedTags\n}) => {\n  _s();\n  //We pull the tags here as this is the highest level where a component needs this data \n  //just like how in the monthPicker we build the month options at the monthPicker.tsx level\n  const {\n    data,\n    error,\n    isLoading\n  } = useQuery('tags', getAllTags);\n  let tags = data;\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, this);\n  if (!tags) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n  let options = tags === null || tags === void 0 ? void 0 : tags.map(tag => {\n    return {\n      value: tag,\n      label: tag.text\n    };\n  });\n  let handleSelectChange = e => {\n    let selectedOptionsParsedToObjects = e.map(selectedOption => {\n      if (typeof selectedOption.value === 'string') {\n        //If the value of the option is a string, this means its a newly created tag, so create a NewTagObject for it\n        let newTagObject = {\n          text: selectedOption.value\n        };\n        return newTagObject;\n      }\n      //Otherwise, option.value should already be of type TagObject or type NewTagObject implictly\n      return selectedOption.value;\n    });\n    setSelectedTags(selectedOptionsParsedToObjects);\n  };\n  let convertSelectedTagsIntoOptionValueFormat = selectedTags => {\n    return selectedTags === null || selectedTags === void 0 ? void 0 : selectedTags.map(tag => {\n      return {\n        value: tag,\n        label: tag.text\n      };\n    });\n  };\n\n  //TODO: do I need to use selectedTags as the value field?\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CreatableSelect, {\n      isMulti: true,\n      options: options,\n      value: convertSelectedTagsIntoOptionValueFormat(selectedTags),\n      onChange: handleSelectChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(TagInput, \"vamb9feK/asxjJLX6wcKCD8DQJA=\", false, function () {\n  return [useQuery];\n});\n_c = TagInput;\nexport default TagInput;\nvar _c;\n$RefreshReg$(_c, \"TagInput\");","map":{"version":3,"names":["React","CreatableSelect","useQuery","getAllTags","jsxDEV","_jsxDEV","TagInput","selectedTags","setSelectedTags","_s","data","error","isLoading","tags","children","fileName","_jsxFileName","lineNumber","columnNumber","toString","options","map","tag","value","label","text","handleSelectChange","e","selectedOptionsParsedToObjects","selectedOption","newTagObject","convertSelectedTagsIntoOptionValueFormat","isMulti","onChange","_c","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/TagInput.tsx"],"sourcesContent":["import React from \"react\";\nimport CreatableSelect from \"react-select/creatable\";\nimport { NewTagObject, TagObject } from \"../../../types\";\nimport { useQuery } from \"react-query\";\nimport { getAllTags } from \"../services/serverConnection\";\n\ntype TagInputProps = {\n  //TODO: do we want to allow undefined to be a valid inout for TagInput components, or should we handle that before and never have it reach the component\n  selectedTags: (TagObject|NewTagObject)[],\n  setSelectedTags: any\n}\n\n//TODO: use the actual props for the option component here?\n//These are the types of the option component which the multi select uses\ntype OptionComponentProps = {\n  value: string\n  label: string\n}\n\nconst TagInput: React.FC<TagInputProps> = ({selectedTags, setSelectedTags}) => {\n  \n  //We pull the tags here as this is the highest level where a component needs this data \n  //just like how in the monthPicker we build the month options at the monthPicker.tsx level\n  const { data, error, isLoading } = useQuery('tags', getAllTags);\n  let tags = data;\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.toString()}</div>; \n  if (!tags) return <div>No data found</div>\n\n  let options = tags?.map((tag:TagObject) => {\n    return {value: tag, label: tag.text}\n  })\n\n  let handleSelectChange = (e:any) => {\n    let selectedOptionsParsedToObjects:(NewTagObject|TagObject)[] = \n      e.map((selectedOption:OptionComponentProps):(NewTagObject|TagObject)[] => {\n        if(typeof selectedOption.value === 'string' ){\n          //If the value of the option is a string, this means its a newly created tag, so create a NewTagObject for it\n          let newTagObject:NewTagObject = {text: selectedOption.value};\n          return newTagObject;\n        }\n        //Otherwise, option.value should already be of type TagObject or type NewTagObject implictly\n        return selectedOption.value;\n      }\n    );\n\n    setSelectedTags(selectedOptionsParsedToObjects);\n  }\n\n  let convertSelectedTagsIntoOptionValueFormat = (selectedTags:(TagObject|NewTagObject)[]) => {\n    return selectedTags?.map((tag:TagObject|NewTagObject) => {\n      return {value: tag, label: tag.text}\n    })\n  }\n\n  //TODO: do I need to use selectedTags as the value field?\n  return(\n    <div>\n        <CreatableSelect \n          isMulti\n          options={options}\n          value={convertSelectedTagsIntoOptionValueFormat(selectedTags)}\n          onChange={handleSelectChange}\n        />\n    </div>\n  )\n} \n\nexport default TagInput;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,wBAAwB;AAEpD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,UAAU,QAAQ,8BAA8B;;AAQzD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,QAAiC,GAAGA,CAAC;EAACC,YAAY;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAE7E;EACA;EACA,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGV,QAAQ,CAAC,MAAM,EAAEC,UAAU,CAAC;EAC/D,IAAIU,IAAI,GAAGH,IAAI;EAEf,IAAIE,SAAS,EAAE,oBAAOP,OAAA;IAAAS,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC3C,IAAIP,KAAK,EAAE,oBAAON,OAAA;IAAAS,QAAA,GAAK,SAAO,EAACH,KAAK,CAACQ,QAAQ,CAAC,CAAC;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EACtD,IAAI,CAACL,IAAI,EAAE,oBAAOR,OAAA;IAAAS,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE1C,IAAIE,OAAO,GAAGP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,GAAG,CAAEC,GAAa,IAAK;IACzC,OAAO;MAACC,KAAK,EAAED,GAAG;MAAEE,KAAK,EAAEF,GAAG,CAACG;IAAI,CAAC;EACtC,CAAC,CAAC;EAEF,IAAIC,kBAAkB,GAAIC,CAAK,IAAK;IAClC,IAAIC,8BAAyD,GAC3DD,CAAC,CAACN,GAAG,CAAEQ,cAAmC,IAAgC;MACxE,IAAG,OAAOA,cAAc,CAACN,KAAK,KAAK,QAAQ,EAAE;QAC3C;QACA,IAAIO,YAAyB,GAAG;UAACL,IAAI,EAAEI,cAAc,CAACN;QAAK,CAAC;QAC5D,OAAOO,YAAY;MACrB;MACA;MACA,OAAOD,cAAc,CAACN,KAAK;IAC7B,CACF,CAAC;IAEDf,eAAe,CAACoB,8BAA8B,CAAC;EACjD,CAAC;EAED,IAAIG,wCAAwC,GAAIxB,YAAuC,IAAK;IAC1F,OAAOA,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEc,GAAG,CAAEC,GAA0B,IAAK;MACvD,OAAO;QAACC,KAAK,EAAED,GAAG;QAAEE,KAAK,EAAEF,GAAG,CAACG;MAAI,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,oBACEpB,OAAA;IAAAS,QAAA,eACIT,OAAA,CAACJ,eAAe;MACd+B,OAAO;MACPZ,OAAO,EAAEA,OAAQ;MACjBG,KAAK,EAAEQ,wCAAwC,CAACxB,YAAY,CAAE;MAC9D0B,QAAQ,EAAEP;IAAmB;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAAAT,EAAA,CAhDKH,QAAiC;EAAA,QAIFJ,QAAQ;AAAA;AAAAgC,EAAA,GAJvC5B,QAAiC;AAkDvC,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}