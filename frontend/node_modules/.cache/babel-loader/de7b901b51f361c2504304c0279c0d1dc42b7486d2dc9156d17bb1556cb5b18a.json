{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nexport async function testServerConnection() {\n  try {\n    const response = await api.get(`/entry/7b021bdd-85a5-4732-a058-83c40fabf6d5`);\n    console.log(\"Server connection worked:\", response);\n    return response.data;\n  } catch (error) {\n    console.error('Test server connection error:', error);\n    throw error; // Optionally re-throw the error for the caller to handle\n  }\n}\nexport async function postNewEntry(payload) {\n  try {\n    console.log(\"Attempted payload: \", payload);\n    const response = await api.post(`/newEntry`, payload);\n\n    // Handle the response if needed\n    console.log('Response from server:', response.data);\n  } catch (error) {\n    // Handle errors\n    console.error('Error sending data to server:', error);\n    throw error; // Optionally re-throw the error for the caller to handle\n  }\n}\n;\nexport async function getAllEntries() {\n  try {\n    const response = await api.get(`/entry/all`);\n    console.log(\"Get all entries here:\", response.data);\n    return Object.values(response.data);\n  } catch (error) {\n    console.error('Error getting data from server:', error);\n    throw error;\n  }\n}\nexport async function archiveEntry(id) {\n  try {\n    const response = await api.put(`/entry/${id}/archive`);\n    console.log(\"Achived entry response: \", response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting data from server:', error);\n    throw error;\n  }\n}\nexport async function editEntry(id, payload) {\n  try {\n    const response = await api.put(`/entry/${id}/edit`);\n    console.log(\"Achived entry response: \", response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting data from server:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","testServerConnection","response","get","console","log","data","error","postNewEntry","payload","post","getAllEntries","Object","values","archiveEntry","id","put","editEntry"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/services/serverConnection.ts"],"sourcesContent":["import axios from 'axios';\nimport { DataEntry, NewDataEntry } from '../../../types';\n\nconst API_BASE_URL = 'http://localhost:3001';\n\n// Create an instance of Axios with the base URL configured\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\nexport async function testServerConnection(): Promise<DataEntry> {\n  try {\n    const response = await api.get(`/entry/7b021bdd-85a5-4732-a058-83c40fabf6d5`);\n    console.log(\"Server connection worked:\", response);\n    return response.data;\n  } catch (error) {\n    console.error('Test server connection error:', error);\n    throw error; // Optionally re-throw the error for the caller to handle\n  }\n}\n\nexport async function postNewEntry(payload:NewDataEntry): Promise<void> {\n  try {\n    console.log(\"Attempted payload: \", payload);\n\n    const response = await api.post(`/newEntry`, payload);\n    \n    // Handle the response if needed\n    console.log('Response from server:', response.data);\n  } catch (error) {\n    // Handle errors\n    console.error('Error sending data to server:', error);\n    throw error; // Optionally re-throw the error for the caller to handle\n  }\n};\n\nexport async function getAllEntries(): Promise<DataEntry[]> {\n  try {\n    const response = await api.get(`/entry/all`);\n    console.log(\"Get all entries here:\", response.data);\n    return Object.values(response.data);\n  } catch (error) {\n    console.error('Error getting data from server:', error);\n    throw error;\n  }\n}\n\nexport async function archiveEntry(id:string): Promise<DataEntry | undefined> {\n  try {\n    const response = await api.put(`/entry/${id}/archive`);\n    console.log(\"Achived entry response: \", response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting data from server:', error);\n    throw error;\n  }\n}\n\nexport async function editEntry(id:string, payload:NewDataEntry): Promise<DataEntry | undefined> {\n  try {\n    const response = await api.put(`/entry/${id}/edit`);\n    console.log(\"Achived entry response: \", response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error getting data from server:', error);\n    throw error;\n  }\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;AAEF,OAAO,eAAeI,oBAAoBA,CAAA,EAAuB;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAE,6CAA4C,CAAC;IAC7EC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,QAAQ,CAAC;IAClD,OAAOA,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF;AAEA,OAAO,eAAeC,YAAYA,CAACC,OAAoB,EAAiB;EACtE,IAAI;IACFL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEI,OAAO,CAAC;IAE3C,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACY,IAAI,CAAE,WAAU,EAAED,OAAO,CAAC;;IAErD;IACAL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,QAAQ,CAACI,IAAI,CAAC;EACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF;AAAC;AAED,OAAO,eAAeI,aAAaA,CAAA,EAAyB;EAC1D,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAE,YAAW,CAAC;IAC5CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACnD,OAAOM,MAAM,CAACC,MAAM,CAACX,QAAQ,CAACI,IAAI,CAAC;EACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeO,YAAYA,CAACC,EAAS,EAAkC;EAC5E,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAE,UAASD,EAAG,UAAS,CAAC;IACtDX,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACtD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeU,SAASA,CAACF,EAAS,EAAEN,OAAoB,EAAkC;EAC/F,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAE,UAASD,EAAG,OAAM,CAAC;IACnDX,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACtD,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}