{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/EntriesPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport EntriesList from \"./EntriesList\";\nimport NewEntryForm from \"./newEntryForm\";\n// import NewEntryForm from \"./newEntryForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EntriesPage = () => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const mutation = useMutation(async newData => {\n    const response = await axios.put('/api/update', newData); // Adjust API endpoint as per your backend\n    return response.data;\n  }, {\n    onSuccess: () => {\n      // Invalidating and refetching data after mutation succeeds\n      // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n      queryClient.invalidateQueries('yourQueryKey'); // Replace 'yourQueryKey' with your actual query key\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewEntryForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EntriesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(EntriesPage, \"brcwcg4FiJJs2KCg+e5qoUwQNrs=\", true);\n_c = EntriesPage;\nexport default EntriesPage;\nvar _c;\n$RefreshReg$(_c, \"EntriesPage\");","map":{"version":3,"names":["React","useState","EntriesList","NewEntryForm","jsxDEV","_jsxDEV","EntriesPage","_s","inputValue","setInputValue","mutation","useMutation","newData","response","axios","put","data","onSuccess","queryClient","invalidateQueries","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/matthewcafiero/PersonalProjects/MemoryBox/frontend/src/components/EntriesPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport EntriesList from \"./EntriesList\";\nimport NewEntryForm from \"./newEntryForm\";\n// import NewEntryForm from \"./newEntryForm\";\n\ntype EntriesPageProps = {};\n\nconst EntriesPage: React.FC<EntriesPageProps> = () => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const mutation = useMutation(\n    async (newData) => {\n      const response = await axios.put('/api/update', newData); // Adjust API endpoint as per your backend\n      return response.data;\n    },\n    {\n      onSuccess: () => {\n        // Invalidating and refetching data after mutation succeeds\n        // This assumes you have a query key like 'yourQueryKey' defined for the data you want to invalidate and refetch\n        queryClient.invalidateQueries('yourQueryKey'); // Replace 'yourQueryKey' with your actual query key\n      },\n    }\n  );\n\n  return (\n    <div>\n      <NewEntryForm></NewEntryForm>\n      <EntriesList></EntriesList>\n    </div>\n  );\n}\n\nexport default EntriesPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,WAAuC,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMS,QAAQ,GAAGC,WAAW,CAC1B,MAAOC,OAAO,IAAK;IACjB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,aAAa,EAAEH,OAAO,CAAC,CAAC,CAAC;IAC1D,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,EACD;IACEC,SAAS,EAAEA,CAAA,KAAM;MACf;MACA;MACAC,WAAW,CAACC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC;IACjD;EACF,CACF,CAAC;EAED,oBACEd,OAAA;IAAAe,QAAA,gBACEf,OAAA,CAACF,YAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,eAC7BnB,OAAA,CAACH,WAAW;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAAAjB,EAAA,CAxBKD,WAAuC;AAAAmB,EAAA,GAAvCnB,WAAuC;AA0B7C,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}